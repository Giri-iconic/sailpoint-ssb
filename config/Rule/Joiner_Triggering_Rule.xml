<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Joiner_Triggering_Rule" type="IdentityTrigger">
  <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.</Description>
  <Signature returnType="boolean">
    <Inputs>
      <Argument name="log" type="org.apache.commons.logging.Log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context" type="sailpoint.api.SailPointContext">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="previousIdentity">
        <Description>
          The identity before the refresh/aggregation (this will be null when an
          identity is created).
        </Description>
      </Argument>
      <Argument name="newIdentity">
        <Description>
          The identity after the refresh/aggregation (this will be null when an
          identity is deleted).
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="result">
        <Description>
          A boolean describing the result of the rule.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[import sailpoint.object.QueryOptions; 
  import sailpoint.object.AuditEvent;
  import sailpoint.object.Custom;
  import sailpoint.object.Filter;
  import sailpoint.object.Link;

  String accountName = newIdentity.getDisplayName();

if(accountName.equals("ISIN1003")) return true;
  if(!accountName.equals("ISIN1003")) return false;

  Custom custom = context.getObjectByName(Custom.class,"AD_Custom_Object");
  String appName = custom.get("applicationName");
  String hrmsName = custom.get("hrmsName");

  boolean adTrigger = false;

  QueryOptions triggerOptions = new QueryOptions();
  triggerOptions.addFilter(Filter.eq("source","AD Joiner Trigger Rule"));
  triggerOptions.addFilter(Filter.eq("action","User account is created in AD"));
  triggerOptions.addFilter(Filter.eq("application",appName));
  triggerOptions.addFilter(Filter.eq("target",accountName));

  int triggerCount = context.countObjects(AuditEvent.class,triggerOptions);

  if(triggerCount > 0) {
    
    log.error("===============================*********USER ACCCOUNT IS TRIGGERED MORE THAN ONCE*********===================================");
    return false;
    
  }

  List linksList = newIdentity.getLinks();

  for(Link link : linksList){

    String applicationName = link.getApplicationName();

    if(applicationName.equals(hrmsName)){

      AuditEvent adJoiner = new AuditEvent();
      adJoiner.setSource("AD Joiner Trigger Rule");
      adJoiner.setAction("User account is created in AD");
      adJoiner.setApplication(appName);
      adJoiner.setTarget(accountName);

      context.saveObject(adJoiner);
      context.commitTransaction();
      log.error(adJoiner.toXml());

      return adTrigger = true;
    }
  }

  return adTrigger;]]></Source>
</Rule>