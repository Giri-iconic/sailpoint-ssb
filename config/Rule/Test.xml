<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Test">
  <Source>
  import sailpoint.object.*;
  import sailpoint.object.Link;
  import java.util.*;
  
  
  
  
  Identity identity = context.getObjectByName(Identity.class,"c7.c7");

  Identity managerIden = identity.getManager();
  
  return identity.getAttribute("distinguishedName");

  ////////////////////////////////////////////////////////////////////////////////////
  //																																								//	
  //	===================  Email Generate logic  ================================ 	//
  //																																								//
  ////////////////////////////////////////////////////////////////////////////////////

  //import java.io.*;
 /* import java.sql.ResultSet;
  import java.sql.Statement;
  import java.sql.Connection;
  import java.util.ArrayList;
  import java.sql.SQLException;
  import java.sql.PreparedStatement;


  String firstName = "test";
  String lastName = "tls";
  String fullName = firstName + "." + lastName;
  String domain = "@gmail.com";
  String email = fullName+domain;
  String updatedMail = null;

  String url  = "jdbc:mysql://localhost:3306/user_info"; // table details
  String username = "root"; // MySQL credentials
  String password = "root";
  String query = "SELECT * FROM emails"; // query to be run
  String insertQuery = "INSERT INTO emails (email) VALUES (?)";

  try {

    Class.forName("com.mysql.cj.jdbc.Driver"); // Driver name
    Connection con = DriverManager.getConnection( url, username, password);
    Statement st = con.createStatement();
    ResultSet rs = st.executeQuery(query); // Execute query

    PreparedStatement prepStatement = con.prepareStatement(insertQuery);


    ArrayList list = new ArrayList();
    while(rs.next()){
      list.add(rs.getString("email"));
    };

    if(!list.contains(email)){
      prepStatement.setString(1,email);
      log.error("Email cotains  : "  + email);
    }else{
      int i = 0;
      while(true){
        i++;

        email = fullName+i+domain;
        if(!list.contains(email)) {
          log.error(email + " inserted..........");
          prepStatement.setString(1,email);
          break;      
        }
        log.error(email + " Email already exits");
      }

    }
    int status = prepStatement.executeUpdate();

    if(status &gt; 0) {
      log.error("Record is inserted successfully !!!");
    }else{
      log.error("Record is failed !!!");
    }

    st.close(); // close statement
    con.close(); // close connection
    log.error("Connection Closed.........");
    

  }catch(SQLException sql){
    log.error("Exception occured : " +sql); 
  }

   return email;
 */

  ////////////////////////////////////////////////////////////////////////////////////
  //																																								//	
  //	=================== Application check logic ================================ 	//
  //																																								//
  ////////////////////////////////////////////////////////////////////////////////////

  //	Identity identity = context.getObjectByName(Identity.class, "ISIN1000");

  /*  Identity id = context.getObjectByName(Identity.class,"ISIN1001");

  List links = id.getLinks();
  //return links.contains("Test");
  boolean trigger = false;
  List l = new ArrayList();
  for(Link link : links){
    l.add(link.getApplicationName());
  }
  if(l.contains("Test")){

    return trigger = true;
  }else{
   	return "Testing"; 
  }
    */


  // log.error(id.getAttributes());
  /* return id.getAttribute("firstname");

  Application application = context.getObjectByName(Application.class, "Test");  
  return application;
  QueryOptions query = new QueryOptions();
  query.addFilter(Filter.eq("application",application));
  List identitiesList = context.getObjects(Link.class,query);
  return identitiesList;

  /*Application application = context.getObjectByName(Application.class, "Test");  
  QueryOptions query = new QueryOptions();
  query.addFilter(Filter.eq("application",application));
  List identitiesList = context.getObjects(Link.class,query);

  return identitiesList;

  List list = identity.getLinks();

  log.error(list);
  return list.contains("Test"); 

    log.error("==================************===========Already has an application in AD============*****************================="); 
  String strNew = "Identity "+ name + " has been triggered";
  QueryOptions opsTrigger = new QueryOptions();
  opsTrigger.addFilter(Filter.eq("source","AD Joiner Trigger rule"));
  opsTrigger.addFilter(Filter.eq("action","User account is created in AD Joiner"));
  opsTrigger.addFilter(Filter.eq("application",appName));
  opsTrigger.addFilter(Filter.eq("target",name));

  int countTrigger  = context.countObjects(AuditEvent.class,opsTrigger);


    AuditEvent aeIqnJoiner = new AuditEvent();
  aeIqnJoiner.setSource("AD Joiner Trigger rule");
  aeIqnJoiner.setAction("User account is created in AD Joiner");
  aeIqnJoiner.setApplication(appName);
  aeIqnJoiner.setTarget(name);

  context.saveObject(aeIqnJoiner);
  context.commitTransaction();
  log.error(aeIqnJoiner.toXml());


  log.error("--------------------------------------------------------------------------------------------------------");
  import java.util.List;
  import sailpoint.object.*;

  String name = identity.getDisplayName();
  log.error("Name from joiner trigger rule : "+ name);
  if(name.equals("ISIN1000")) {
    return true;
	}
   return false;
  log.error("--------------Not comming---------");


  //  Custom customObject = context.getObjectByName(Custom.class,"AD_Custom_Object");
 // String appName = customObject.getString("applicationName");

/*  if(countTrigger != 0) {

    log.error(countTrigger);

    return false;
  }

  boolean trigger = false;

  List list= identity.getLinks();
  log.error(list);

  for(Link link : list){   

    String appplicationName= link.getApplicationName();
    log.error("------------*************** Applicatio name : "+ applicationName);

    if(appplicationName.equals("Test")) {

      log.error("_____________Entered block--------------------");
      return true;
      log.error(identity.getDisplayName() + " has account on : " + link.getApplicationName());

    }

  }


  return trigger; */


  </Source>
</Rule>