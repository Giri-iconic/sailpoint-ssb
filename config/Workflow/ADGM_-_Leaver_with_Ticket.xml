<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow name="ADGM - Leaver with Ticket" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event" transient="true">
    <Description>The IdentityChangeEvent. It can be used to build
			the
			provisioning plan, but does not need to be
			persisted with the case, so
			marked as transient.</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>The displayName of the identity being updated.
			Query for
			this using a projection query and fall back to the name.</Description>
  </Variable>
  <Variable name="plan">
    <Description>The provisioning plan, which is built by a service
			method.</Description>
  </Variable>
  <Variable initializer="Leaver" input="true" name="useCase">
    <Description>The name of the LCM use case that launched this workflow.

			This is one of these values:
			Joiner
			User Transfer
			Leaver
			AccessRequest</Description>
  </Variable>
  <Variable name="ticketPlan">
    <Description>The provisioning plan, for leaver event ticket creation.</Description>
  </Variable>
  <Variable name="ticketProject">
    <Description>Ticket Project</Description>
  </Variable>
  <Variable editable="true" initializer="false" name="optimisticProvisioning">
    <Description>Set to true to enable optimistic provisioning. This will
			cause
			changes to the entitlements compiled from role assignments to be
			applied immediately to the identity cube rather than waiting
			for the
			next refresh/reaggregation after the provisioning system
			completes the
			request.</Description>
  </Variable>
  <Variable editable="true" initializer="true" name="foregroundProvisioning">
    <Description>Normally provisioning is done in a step that uses the
			&amp;quot;background&amp;quot;
			option to force the workflow to be
			suspend and be resumed in a
			background task thread. This prevents the
			browser session from
			hanging since provision can sometimes take a long
			time. For demos
			and testing it can be better to do this in the
			foreground so that
			provisioning will have been performed when control
			is returned to the
			user. This prevents having to run the Perform
			Maintenance task to
			see the results of the request.</Description>
  </Variable>
  <Variable initializer="spadmin" input="true" name="fallbackApprover">
    <Description>A String that specifies the name of the Identity that
			will
			be assigned any approvals where the owner of the approver
			can&amp;#39;t be resolved. Example if the scheme is
			&amp;quot;owner&amp;quot; and
			the
			application doesn&amp;#39;t specify
			and owner.</Description>
  </Variable>
  <Variable initializer="LCM" input="true" name="source">
    <Description>String version of sailpoint.object.Source to indicate
			where the request originated. Defaults to LCM.</Description>
  </Variable>
  <Variable initializer="false" input="true" name="trace">
    <Description>Used for debugging this workflow and when set to true
			trace
			will be sent to stdout.</Description>
  </Variable>
  <Variable name="project">
    <Description>ProvisioningProject which is just a compiled version of
			the ProvisioningPlan.</Description>
  </Variable>
  <Variable name="identityRequestId" output="true">
    <Description>The sequence id of the Identity request object which is
			stored in
			the name field of the identity request.</Description>
  </Variable>
  <Variable name="cart" output="true">
    <Description>This variable includes all ApprovalItems that are part of
			the request process and is updated during the AfterScript
			of the
			approval process by assimilating the decisions
			and comments from the
			Approvals copy of the ApprovalItem.</Description>
  </Variable>
  <Variable initializer="Normal" input="true" name="workItemPriority">
    <Description>The String version of a WorkItem.Priority. This variable
			is
			used to set the priority on all of the workitems generated
			as part
			of this workflow and also set on the IdentityRequest
			object.</Description>
  </Variable>
  <Variable initializer="SMAX Ticketing" input="true" name="ticketManagementApplication">
    <Description>Name of the application that can handle ticket requests.
			When non-null the Manage Ticket Steps will be visited to open
			tickets
			during the workflow lifecycle.</Description>
  </Variable>
  <Variable name="ticketId">
    <Description>The id of the ticket that is generated by the
			ticketingManagementApplication.
			This is typically generated on the
			&amp;quot;open&amp;quot; call, and
			then used in subsequent
			calls. It is
			also stored on the IdentityRequest object under the
			externalTicketId
			variable.</Description>
  </Variable>
  <Description>Disable all accounts when an employee leaves the company.</Description>
  <Step action="call:buildEventPlan" icon="Start" name="Build Provisioning Plan" posX="50" posY="10" resultVariable="plan">
    <Arg name="op" value="Disable"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="trigger" value="ref:trigger"/>
    <Arg name="event" value="ref:event"/>
    <Description>Go through all of the user's links and build a plan.</Description>
    <Transition to="Change Status"/>
  </Step>
  <Step icon="Task" name="Update AD Plan" posX="856" posY="113" resultVariable="plan">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="plan" value="ref:plan"/>
    <Description>Appennd Plan to add ticket and remove AD Groups</Description>
    <Script>
      <Source>
        import java.util.ArrayList;
        import java.util.List;
        import java.util.HashMap;
        import java.util.Map;

        import sailpoint.api.IdentityService;
        import sailpoint.object.Application;
        import sailpoint.object.Identity;
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.object.ProvisioningProject;
        import sailpoint.object.ProvisioningPlan.ObjectRequest;
        import sailpoint.object.ProvisioningPlan.ObjectOperation;
        import sailpoint.object.Workflow;
        import sailpoint.object.Rule;         
        import sailpoint.tools.GeneralException;
        import sailpoint.api.IdentityService; 
        import sailpoint.object.Link;
        import sailpoint.api.ObjectUtil;

        import ObjectUtil;

        Identity identityObject = context.getObjectByName(Identity.class, identityName);
        // Get AD account
        List&lt;AccountRequest&gt; accountRequests = plan.getAccountRequests();
        String adAppName = "";
        String adNavtiveIdentityName = "";
        List&lt;AccountRequest&gt; newAccountRequest = new ArrayList();
        for(AccountRequest accountRequest : accountRequests){
        if(accountRequest.getApplication().equalsIgnoreCase("Active Directory")){
        adAppName = accountRequest.getApplication();
        adNavtiveIdentityName = accountRequest.getNativeIdentity();
        } else if(accountRequest.getApplication().equalsIgnoreCase("Hub") || accountRequest.getApplication().equalsIgnoreCase("Oracle HRMS")){
        continue;
        }
        newAccountRequest.add(accountRequest);
        }

        plan.setAccountRequests(newAccountRequest);
        Application app = context.getObjectByName(Application.class,"Active Directory");

        // if application type is active directory remove all the AD groups as per the requirement
        AccountRequest modify = new AccountRequest();
        List&lt;Link&gt; adLinks = identityObject.getLinks(app); 
        if(adLinks != null &amp;&amp; adLinks.size()&gt;0){
        for (Link adLink : adLinks){
        AttributeRequest removeGpRequest = new AttributeRequest();
        removeGpRequest.setName("memberOf");
        List groups = adLink.getAttribute("memberOf");
        groups.remove("CN=Domain Users,CN=Users,DC=adgm,DC=com");
        removeGpRequest.setValue(groups);
        removeGpRequest.setOp(ProvisioningPlan.Operation.Remove);
        modify.add(removeGpRequest);
        // removing phone number from active directory
        modify.add(new AttributeRequest("telephoneNumber",ProvisioningPlan.Operation.Remove)); 
        modify.setApplication(adAppName);
        modify.setNativeIdentity(adNavtiveIdentityName);
        modify.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
        }
        plan.add(modify);	 
        }

        return plan;
      </Source>
    </Script>
    <Transition to="Initialize"/>
  </Step>
  <Step icon="Task" name="Initialize" posX="848" posY="12">
    <Arg name="formTemplate" value="Identity Update"/>
    <Arg name="enableRetryRequest"/>
    <Arg name="allowRequestsWithViolations"/>
    <Arg name="endOnManualWorkItems"/>
    <Arg name="policiesToCheck"/>
    <Arg name="workItemPriority"/>
    <Arg name="workItemComments"/>
    <Arg name="project"/>
    <Arg name="identityRequestId"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="requireViolationReviewComments"/>
    <Arg name="identityRequest"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="enableApprovalRecommendations"/>
    <Arg name="endOnProvisioningForms"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="flow" value="ref:useCase"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="approvalSet"/>
    <Arg name="policyViolations"/>
    <Arg name="violationReviewDecision"/>
    <Arg name="policyScheme" value="none"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="asyncCacheRefresh"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Description>
			Call the standard subprocess to initialize the request,
			this includes
			auditing, building the approvalset, compiling the plan
			into
			project and checking policy violations.
		</Description>
    <Return name="project" to="project"/>
    <Return name="approvalSet" to="cart"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Return name="policyViolations" to="policyViolations"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Initialize"/>
    </WorkflowRef>
    <Transition to="Create Ticket"/>
  </Step>
  <Step condition="(ticketManagementApplication != null)" icon="Task" name="Create Ticket" posX="919" posY="13">
    <Arg name="trace"/>
    <Arg name="useCase" value="ref:useCase"/>
    <Arg name="ticketManagementApplication" value="ref:ticketManagementApplication"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="action" value="open"/>
    <Arg name="identityRequestId"/>
    <Arg name="priority"/>
    <Arg name="ticketProject"/>
    <Arg name="ticketId"/>
    <Arg name="ticketDataGenerationRule"/>
    <Arg name="ticketPlan"/>
    <Description>
			Call a subprocess to create a ticket in the
			ticketManagementApplication
			is non-null.
			You can specify a specific
			'ticketDataGenerationRule' here or you can
			also specify
			it on the
			application. It'll be read from the argument first and fall
			back to
			the '
			application config.
		</Description>
    <Return name="ticketId" to="externalTicketId"/>
    <Transition to="Disconnected App Ticket Creation"/>
  </Step>
  <Step icon="Provision" name="Provision" posX="654" posY="151" wait="1">
    <Arg name="formTemplate" value="Identity Update"/>
    <Arg name="approvalScheme" value="ref:approvalScheme"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="fallbackApprover" value="ref:fallbackApprover"/>
    <Arg name="approvalSet"/>
    <Arg name="manualActionsEmailTemplate" value="Pending Manual Changes"/>
    <Arg name="workItemComments"/>
    <Arg name="workItemPriority"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="policyScheme" value="none"/>
    <Arg name="splitProvisioning"/>
    <Arg name="saveUnmanagedPlan"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Arg name="noTriggers"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="saveUnmanagedPlan_WithProjectArgument"/>
    <Arg name="recompile"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="plan"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Description>
			Call the standard subprocess that will process the
			approval decisions and do provisioning. This
			includes calling any
			configured provisioning
			connectors and building manual actions.
		</Description>
    <Return name="project" to="project"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Provision"/>
    </WorkflowRef>
    <Transition to="Update Manager Field"/>
  </Step>
  <Step name="Add Notification Attributes" posX="316">
    <Description>This is left over from the previous incarnation of this
			workflow. Need to figure out if this is still needed</Description>
    <Script>
      <Source>
			
			import sailpoint.object.Identity;
			import sailpoint.object.WorkflowCase;
			
			// Grab the cube
			Identity cube = context.getObjectByName(Identity.class, identityName);
			
			String managerName;
			Identity manager = cube.getManager();
			if (manager != null) {
			    managerName = manager.getDisplayName();
			} else {
			  managerName = "NA"; // Default No Manager Notification
			}
			String identityDisplayName = cube.getDisplayName();
			
			WorkflowCase c = wfcontext.getWorkflowCase();
			c.put("identityDisplayName", identityDisplayName);
			c.put("managerDisplayName", managerName);
			c.put("employeeNumber", cube.getAttribute("employeeNumber"));
			c.put("department", cube.getAttribute("organization"));
			c.put("division", cube.getAttribute("division"));
			c.put("authority", cube.getAttribute("authority"));
			c.put("jobTitle", cube.getAttribute("jobTitle"));
			c.put("position", cube.getAttribute("position"));
			c.put("email", cube.getEmail());
			c.put("endDate", cube.getAttribute("assignmentEnd"));
			c.put("userId", cube.getName());
			c.put("firstName", cube.getFirstname());
			c.put("lastName", cube.getLastname());

     </Source>
    </Script>
    <Transition to="Notify Stakeholders"/>
  </Step>
  <Step action="call:sendMultipleNotifications" configForm="Provisioning Notification Step Form" icon="Email" name="Notify Stakeholders" posX="422" posY="9">
    <Arg name="requesterEmail" value="script:getEmail(launcher)"/>
    <Arg name="otherUsersToNotifyEmailTemplate" value="ADGM - Leaver GS Finance Notification"/>
    <Arg name="notificationScheme" value="otherUsers"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="userEmailTemplate"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="managerEmail" value="script:getManagersEmail(identityName, plan)"/>
    <Arg name="otherUsersToNotify" value="331,122,308,362,078,340,134,246,sara.alkhatib"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="userEmail" value="script:getUserEmail(identityName, plan)"/>
    <Arg name="mailId">
      <Script>
        <Source>
			import sailpoint.object.Identity;
			Identity identity=context.getObjectByName(Identity.class, identityName);
			return identity.getEmail();
        </Source>
      </Script>
    </Arg>
    <Arg name="securityOfficerName" value="IT Support"/>
    <Arg name="securityOfficerEmailTemplate" value="ADGM - Leaver IT Support Notification"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="managerEmailTemplate" value="ADGM - Leaver Manager Notification"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="appMap">
      <Script>
        <Source>
			import sailpoint.object.Application;
			import sailpoint.object.Identity;
			import sailpoint.object.Link;
			import org.apache.log4j.Logger;
			
			Logger serilog = Logger.getLogger("sailpoint.injazat.workflow.leaver");
			Identity identity=context.getObjectByName(Identity.class, identityName);
			serilog.debug("Checking disabled to notify for identity "+identityName);
			
			List links = identity.getLinks();
			List mapAppList = new ArrayList();
			if (links!=null) {
			  serilog.debug("Found "+links.size()+" links on "+identityName);
			  for (Link link : links) {
			   
			    Application app = link.getApplication();
			    if (app == null) {
			      serilog.debug("App is null");
			      return false;
			    }
			  
			    //if this app is not in the list of apps to notify mgr skip it
			    if(link.isDisabled()){
					String accountId = link.getDisplayableName();
				    if (accountId == null ){
				        accountId = link.getNativeIdentity();
				    }
				    Map appParam = new HashMap();
				    appParam.put("application", app.getName());
				    appParam.put("accountid", accountId);
				    mapAppList.add(appParam);			    	
			    }
			  }
			} else {
			  serilog.debug("No links found on identity "+identityName);
			}
			return mapAppList;
        </Source>
      </Script>
    </Arg>
    <Description>
			Notify the various actors specified on notification
			scheme.
		</Description>
    <Transition to="Employee Leaver Bundle Manage Engine"/>
  </Step>
  <Step icon="Provision" name="Update Manager Field" posX="489" posY="151">
    <Description>Remove the manager field so that the manager can't see
			the leaver reporting to him/her</Description>
    <Script>
      <Source>import sailpoint.object.Identity;  
		// Have IdentityIQ retrieve the specific Identity object for us to modify.  
		Identity id = context.getObjectByName(Identity.class, identityName);  
		if (null == id) {  
		   log.error("Could not find Identity record named: " + identityName);  
		}  
		  
		id.setManager(null);  
		  
		context.saveObject(id);  
		context.commitTransaction();  
		  
		context.decache(id);  
		return;
  </Source>
    </Script>
    <Transition to="Update Ticket Post Provision"/>
  </Step>
  <Step condition="(ticketManagementApplication != null)" icon="Task" name="Update Ticket Post Provision" posX="306" posY="145">
    <Arg name="trace"/>
    <Arg name="useCase" value="ref:useCase"/>
    <Arg name="ticketManagementApplication"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="action" value="postProvisioning"/>
    <Arg name="identityRequestId"/>
    <Arg name="priority"/>
    <Arg name="ticketProject"/>
    <Arg name="ticketId"/>
    <Arg name="ticketDataGenerationRule"/>
    <Arg name="ticketPlan"/>
    <Description>
			Call a subprocess to update the ticket in the
			ticketManagementApplication
			is non-null.

			You can specify a specific
			'ticketDataGenerationRule' here or you can
			also specify
			it on the
			application. It'll be read from the argument first and fall
			back to
			the '
			application config.

		</Description>
    <Transition to="Finalize Request"/>
  </Step>
  <Step catches="complete" condition="(ticketManagementApplication != null)" icon="Task" name="Finalize Request" posX="72" posY="145">
    <Arg name="trace" value="ref:trace"/>
    <Arg name="useCase" value="ref:useCase"/>
    <Arg name="autoVerifyIdentityRequest" value="true"/>
    <Arg name="approvalSet" value="ref:cart"/>
    <Arg name="ticketManagementApplication" value="ref:ticketManagementApplication"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="identityRequestId"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="ticketDataGenerationRule"/>
    <Description>
			Call the standard subprocess that can audit/finalize the
			request.
		</Description>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Task" name="Update Plan For Card" posX="72" posY="286" resultVariable="plan">
    <Arg name="plan" value="ref:plan"/>
    <Description>Update plan to add a ticket for GS for revoking physical
			access &amp; collecting access card</Description>
    <Script>
      <Source>
	    import java.util.ArrayList;
	    import java.util.List;
	    import java.util.HashMap;
	    import java.util.Map;

	    import sailpoint.api.IdentityService;
	    import sailpoint.object.Application;
	    import sailpoint.object.Identity;
	    import sailpoint.object.ProvisioningPlan;
	    import sailpoint.object.ProvisioningPlan.AccountRequest;
	    import sailpoint.object.ProvisioningPlan.AttributeRequest;
	    import sailpoint.object.ProvisioningProject;
	    import sailpoint.object.ProvisioningPlan.ObjectRequest;
	    import sailpoint.object.ProvisioningPlan.ObjectOperation;
	    import sailpoint.object.Workflow;
	    import sailpoint.object.Rule;         
	    import sailpoint.tools.GeneralException;
	    import sailpoint.api.IdentityService; 
        import sailpoint.object.Link;
        import sailpoint.api.ObjectUtil;

	    import sailpoint.object.Configuration;
		
		
		Configuration configuration = (Configuration) context.getObjectByName(Configuration.class, "ADGM Configuration");
		ProvisioningPlan plan = new ProvisioningPlan();
		String cardApplication = configuration.get("CardApplication");
		
		AccountRequest accRequest = new AccountRequest();
		accRequest.setNativeIdentity(identityName);
		accRequest.setOperation(ProvisioningPlan.AccountRequest.Operation.Delete);
		accRequest.setComments("Please disable the card and collect it from the employee.");
		accRequest.setApplication(cardApplication);
       
         plan.add(accRequest);	   

	    return plan;
	  	</Source>
    </Script>
    <Transition to="Submit Request for Card Remove"/>
  </Step>
  <Step icon="Approval" name="Submit Request for Card Remove" posX="315" posY="286">
    <Arg name="identityEmailTemplate"/>
    <Arg name="enableRetryRequest"/>
    <Arg name="securityOfficerElectronicSignature"/>
    <Arg name="fallbackApprover" value="spadmin"/>
    <Arg name="endOnManualWorkItems"/>
    <Arg name="userEmailTemplate"/>
    <Arg name="policiesToCheck"/>
    <Arg name="project"/>
    <Arg name="workItemComments" value="Request auto-submitted for Access Card Collection and Disable"/>
    <Arg name="identityRequestId"/>
    <Arg name="approvalSplitPoint"/>
    <Arg name="source"/>
    <Arg name="identityDisplayName"/>
    <Arg name="foregroundProvisioning" value="false"/>
    <Arg name="ownerElectronicSignature"/>
    <Arg name="batchRequestItemId"/>
    <Arg name="splitPlans"/>
    <Arg name="doRefresh"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="flow" value="AccessRequest"/>
    <Arg name="identityElectronicSignature"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="approvalSet"/>
    <Arg name="violationReviewDecision"/>
    <Arg name="filterRejects"/>
    <Arg name="splitProjects"/>
    <Arg name="workItemMaxReminders"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="approvalEmailTemplate" value="ADGM - LCM Approval Notification"/>
    <Arg name="ticketManagementApplication" value="ref:ticketManagementApplication"/>
    <Arg name="securityOfficerName"/>
    <Arg name="approvingIdentities"/>
    <Arg name="workItemHoursTillEscalation"/>
    <Arg name="managerEmailTemplate"/>
    <Arg name="ticketId"/>
    <Arg name="approvalScheme" value="none"/>
    <Arg name="allowRequestsWithViolations"/>
    <Arg name="workItemHoursBetweenReminders"/>
    <Arg name="workItemPriority"/>
    <Arg name="managerElectronicSignature"/>
    <Arg name="requireViolationReviewComments"/>
    <Arg name="splitApprovalSet"/>
    <Arg name="approvalMode"/>
    <Arg name="trace"/>
    <Arg name="endOnProvisioningForms"/>
    <Arg name="approvalAssignmentRule" value="ADGM Joiner Approval Assignment Rule"/>
    <Arg name="splitWorkItemComments"/>
    <Arg name="notificationScheme" value="none"/>
    <Arg name="policyViolations"/>
    <Arg name="workItemReminderTemplate"/>
    <Arg name="policyScheme"/>
    <Arg name="setPreviousApprovalDecisions"/>
    <Arg name="useCase" value="AccessRequest"/>
    <Arg name="optimisticProvisioning" value="true"/>
    <Arg name="securityOfficerEmailTemplate"/>
    <Description>Submit Request for Access Card Collection and Disable</Description>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Stop" name="Stop" posX="584" posY="286"/>
  <Step action="sendEmail" condition="rule:ADGM - Check info Owner" icon="Email" name="Notify" posX="222" posY="5">
    <Arg name="template" value="ADGM - Notify Information Owner Change Leaver"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="to" value="sailpoint.Notification@adgm.com"/>
    <Description>Notify SailPoint Admin when the information owner is leaving the organization</Description>
    <Transition to="Add Notification Attributes"/>
  </Step>
  <Step icon="Default" name="Change Status" posX="136" posY="6">
    <Script>
      <Source> import sailpoint.object.Identity;        			
        			Identity identityObj =context.getObject(Identity.class,identityName);
        			identityObj.setAttribute("status", "Terminated");
        			identityObj.setAttribute("inactive", true);
        			context.saveObject(identityObj);
        			context.commitTransaction();</Source>
    </Script>
    <Transition to="Notify"/>
  </Step>
  <Step action="call:sendMultipleNotifications" configForm="Provisioning Notification Step Form" icon="Email" name="Employee Leaver Bundle Manage Engine" posX="564">
    <Arg name="requesterEmail" value="script:getEmail(launcher)"/>
    <Arg name="otherUsersToNotifyEmailTemplate" value="Manage Engine Ticket Creation Leaver"/>
    <Arg name="notificationScheme" value="otherUsers"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="userEmailTemplate"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="managerEmail" value="script:getManagersEmail(identityName, plan)"/>
    <Arg name="otherUsersToNotify" value="IT Support"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="userEmail" value="script:getUserEmail(identityName, plan)"/>
    <Arg name="securityOfficerName"/>
    <Arg name="securityOfficerEmailTemplate"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="managerEmailTemplate"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="launcher" value="ref:launcher"/>
    <ConditionScript>
      <Source>
    import sailpoint.object.Link;
    import java.util.List;     
    import sailpoint.object.Identity;
     import org.apache.log4j.Logger;
      
      Logger log = Logger.getLogger("adgm.workflow.joiner");
		
		// Grab the cube
     Identity cube = context.getObjectByName(Identity.class, identityName);
     
    if(cube.getAttribute("employeeType").equals("Intern"))
    {
        return false;
    }
    else{
      return true;
    }</Source>
    </ConditionScript>
    <Description>
      	  Notify the various actors specified on notification scheme.
        </Description>
    <Transition to="Intern Leaver Bundle Manage Engine"/>
  </Step>
  <Step action="call:sendMultipleNotifications" configForm="Provisioning Notification Step Form" icon="Email" name="Disconnected App Ticket Creation" posX="1029" posY="6">
    <Arg name="App">
      <Script>
        <Source>import sailpoint.object.Identity;
    import java.util.List;
    import org.apache.log4j.Logger;
    import java.util.ArrayList;  
    import sailpoint.object.Identity;  
    import sailpoint.object.Link;  
    import sailpoint.object.Filter; 
    import java.util.Date;
      import sailpoint.object.Identity;
        import sailpoint.object.WorkflowCase;

   Identity id = context.getObjectByName(Identity.class, identityName);
   List links = id.getLinks();
  WorkflowCase cu = wfcontext.getWorkflowCase();
        
   String App;
   for(Link link : links)
   {
     if(link.getApplication().getType().equals("DelimitedFile"))
     {
      App=link.getApplication().getName();
      
       return App;
     }
 }
  return "No App";</Source>
      </Script>
    </Arg>
    <Arg name="requesterEmail" value="script:getEmail(launcher)"/>
    <Arg name="otherUsersToNotifyEmailTemplate" value="Manage Engine Ticket Creation Disconnected_App"/>
    <Arg name="notificationScheme" value="otherUsers"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="userEmailTemplate"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="managerEmail" value="script:getManagersEmail(identityName, plan)"/>
    <Arg name="otherUsersToNotify" value="Manage Engine"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="userEmail" value="script:getUserEmail(identityName, plan)"/>
    <Arg name="securityOfficerName"/>
    <Arg name="securityOfficerEmailTemplate"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="managerEmailTemplate"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="launcher" value="ref:launcher"/>
    <ConditionScript>
      <Source>   import sailpoint.object.Identity;
    import java.util.List;
    import org.apache.log4j.Logger;
    import java.util.ArrayList;  
    import java.util.Iterator;  
    import sailpoint.object.Identity;  
    import sailpoint.object.Link;  
    import sailpoint.object.QueryOptions;  
    import sailpoint.object.Filter; 
    import java.util.Date;
    import sailpoint.object.TaskResult;
    import sailpoint.api.Terminator;
      import sailpoint.object.Identity;
        import sailpoint.object.WorkflowCase;

   Identity id = context.getObjectByName(Identity.class, identityName);
   List links = id.getLinks();
  WorkflowCase cu = wfcontext.getWorkflowCase();
        
   String App;
   for(Link link : links)
   {
     if(link.getApplication().getType().equals("DelimitedFile"))
     {
      App=link.getApplication().getName();
      cu.put("App", App);
       return true + App;
     }
 }
  return false;</Source>
    </ConditionScript>
    <Description>
      	  Notify the various actors specified on notification scheme.
        </Description>
    <Transition to="Provision"/>
  </Step>
  <Step action="call:sendMultipleNotifications" configForm="Provisioning Notification Step Form" icon="Email" name="Intern Leaver Bundle Manage Engine" posX="728" posY="30">
    <Arg name="requesterEmail" value="script:getEmail(launcher)"/>
    <Arg name="otherUsersToNotifyEmailTemplate" value="Manage Engine Ticket Creation Intern Leaver"/>
    <Arg name="notificationScheme" value="otherUsers"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="userEmailTemplate"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="managerEmail" value="script:getManagersEmail(identityName, plan)"/>
    <Arg name="otherUsersToNotify" value="IT Support"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="userEmail" value="script:getUserEmail(identityName, plan)"/>
    <Arg name="securityOfficerName"/>
    <Arg name="securityOfficerEmailTemplate"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="managerEmailTemplate"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="launcher" value="ref:launcher"/>
    <ConditionScript>
      <Source>
    import sailpoint.object.Link;
    import java.util.List;     
    import sailpoint.object.Identity;
     import org.apache.log4j.Logger;
      
      Logger log = Logger.getLogger("adgm.workflow.joiner");
		
		// Grab the cube
     Identity cube = context.getObjectByName(Identity.class, identityName);
     
    if(cube.getAttribute("employeeType").equals("Intern"))
    {
        return true;
    }
    else{
      return false;
    }</Source>
    </ConditionScript>
    <Description>
      	  Notify the various actors specified on notification scheme.
        </Description>
    <Transition to="Initialize"/>
  </Step>
</Workflow>