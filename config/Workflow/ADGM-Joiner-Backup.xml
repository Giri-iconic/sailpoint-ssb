<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity,IdentityRequest" name="ADGM-Joiner-Backup" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable initializer="true" name="trace">
    <Description>Used for debugging this workflow and when set to true
			trace
			will be sent to stdout.</Description>
  </Variable>
  <Variable input="true" name="event" transient="true">
    <Description>The IdentityChangeEvent. It can be used to build
			the
			provisioning plan, but does not need to be
			persisted with the case, so
			marked as transient.</Description>
  </Variable>
  <Variable initializer="LCM" input="true" name="source">
    <Description>String version of sailpoint.object.Source to indicate
			where the request originated. Defaults to LCM.</Description>
  </Variable>
  <Variable initializer="false" input="true" name="optimisticProvisioning" required="true">
    <Description>Set to true to enable optimistic provisioning. This will
			cause
			changes to the entitlements compiled from role assignments to be
			applied immediately to the identity cube rather than waiting
			for the
			next refresh/reaggregation after the provisioning system
			completes the
			request.</Description>
  </Variable>
  <Variable initializer="false" name="enableRetryRequest">
    <Description>When set to true it will disable the workflow retry loop
			and let the
			Provision step launch requests to handle the retries.
			Enabling
			this flag will enable some older functionality.</Description>
  </Variable>
  <Variable input="true" name="flow">
    <Description>The name of the LCM flow that launched this workflow.

			This is one of these values:

			AccountsRequest
			EntitlementsRequest
			RolesRequest
			IdentityCreateRequest
			IdentityEditRequest
			ForgotPassword
			ExpiredPassword
			PasswordRequest</Description>
  </Variable>
  <Variable initializer="Joiner" input="true" name="useCase">
    <Description>The name of the LCM use case that launched this workflow.

			This is one of these values:
			Joiner
			User Transfer
			Leaver
			AccessRequest</Description>
  </Variable>
  <Variable name="project">
    <Description>ProvisioningProject which is just a compiled version of
			the ProvisioningPlan.</Description>
  </Variable>
  <Variable name="plan">
    <Description>Provisioning Plan</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable input="true" name="ticketManagementApplication">
    <Description>Name of the application that can handle ticket requests.
			When non-null the Manage Ticket Steps will be visited to open
			tickets
			during the workflow lifecycle.</Description>
  </Variable>
  <Variable name="ticketId">
    <Description>The id of the ticket that is generated by the
			ticketingManagementApplication.
			This is typically generated on the
			&amp;quot;open&amp;quot; call, and
			then used in subsequent
			calls. It is
			also stored on the IdentityRequest object under the
			externalTicketId
			variable.</Description>
  </Variable>
  <Variable name="refreshResult" type="sailpoint.object.TaskResult"/>
  <Variable initializer="true" name="requestRestrictedFolder">
    <Description>This is a contron varible used to raise a request for restricted folders</Description>
  </Variable>
  <Step action="call:buildEventPlan" icon="Start" name="Build Provisioning Plan" posX="36" posY="29" resultVariable="plan">
    <Arg name="op" value="Create"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="trigger" value="ref:trigger"/>
    <Arg name="event" value="ref:event"/>
    <Transition to="Stop">
      <Script>
        <Source><![CDATA[
    import sailpoint.object.Link;
          import java.util.List;
          
    import sailpoint.object.Identity;
		import org.apache.log4j.Logger;
		Logger log = Logger.getLogger("adgm.workflow.joiner");
		
		// Grab the cube
		Identity cube = context.getObjectByName(Identity.class, identityName);
      List linklist=cube.getLinks();
           boolean hrmsexist=false;
		for (Link link :linklist) {
   //Link link = (Link) it.next();
   String appName = link.getApplication().getName();
 //Application app = context.getObjectByName(Application.class, appName);
  //List links = id.getLinks(app);
  if(appName.equals("Fusion HRMS")){
   //String acctName = link.getNativeIdentity();
   log.debug("App Found:" + cube.getName() + " app:" + appName );
   //System.out.println("App Found------------------------------------");
     hrmsexist=true;
  }
}
if(!hrmsexist)
{
log.error("Oracle HRMS not Found First Steps --");
return true;

}

return false;
        ]]></Source>
      </Script>
    </Transition>
    <Transition to="Initialize"/>
  </Step>
  <Step icon="Task" name="Initialize" posX="201" posY="25">
    <Arg name="formTemplate"/>
    <Arg name="enableRetryRequest"/>
    <Arg name="allowRequestsWithViolations"/>
    <Arg name="endOnManualWorkItems" value="ref:endOnManualWorkItems"/>
    <Arg name="policiesToCheck" value="ref:policiesToCheck"/>
    <Arg name="workItemPriority"/>
    <Arg name="workItemComments"/>
    <Arg name="project"/>
    <Arg name="identityRequestId"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="requireViolationReviewComments"/>
    <Arg name="identityRequest"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="batchRequestItemId" value="ref:batchRequestItemId"/>
    <Arg name="enableApprovalRecommendations"/>
    <Arg name="endOnProvisioningForms" value="ref:endOnProvisioningForms"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="flow" value="ref:useCase"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="policyViolations"/>
    <Arg name="violationReviewDecision"/>
    <Arg name="policyScheme" value="ref:policyScheme"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="asyncCacheRefresh"/>
    <Arg name="optimisticProvisioning" value="false"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Description>
			Call the standard subprocess to initialize the request,
			this includes
			auditing, building the approvalset, compiling the plan
			into
			a project and checking policy violations.
		</Description>
    <Return name="policyViolations" to="policyViolations"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Return name="project" to="project"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Initialize"/>
    </WorkflowRef>
    <Transition to="Create Ticket"/>
  </Step>
  <Step name="Add Notification Attributes" posX="707" posY="25">
    <Description>This is left over from the previous incarnation of this
			workflow. Need to figure out if this is still needed</Description>
    <Script>
      <Source><![CDATA[
			import sailpoint.object.Identity;
			import sailpoint.object.WorkflowCase;
			
			// Grab the cube
			Identity cube = context.getObjectByName(Identity.class, identityName);
			
			String managerName;
			Identity manager = cube.getManager();
			if (manager != null) {
			    managerName = manager.getDisplayName();
			} else {
			  managerName = "NA"; // Default No Manager Notification
			}
			String identityDisplayName = cube.getDisplayName();
			
			WorkflowCase c = wfcontext.getWorkflowCase();
			c.put("identityDisplayName", identityDisplayName);
			c.put("managerDisplayName", managerName);
			c.put("employeeNumber", cube.getAttribute("employeeNumber"));
			c.put("department", cube.getAttribute("organization"));
                        c.put("employeeType", cube.getAttribute("employeeType"));
			c.put("division", cube.getAttribute("division"));
			c.put("authority", cube.getAttribute("authority"));
			c.put("jobTitle", cube.getAttribute("jobTitle"));
			c.put("position", cube.getAttribute("position"));
			c.put("email", cube.getEmail());
                       c.put("hireDate", cube.getAttribute("hireDate"));
			c.put("tempPass", context.decrypt(cube.getPassword()));
			
			c.put("userId", cube.getName());
			c.put("firstName", cube.getFirstname());
			c.put("lastName", cube.getLastname());
			
			

     ]]></Source>
    </Script>
    <Transition to="Notify Stakeholders"/>
  </Step>
  <Step condition="script:(ticketManagementApplication != null)" icon="Task" name="Create Ticket" posX="311" posY="25">
    <Arg name="trace" value="ref:trace"/>
    <Arg name="useCase" value="ref:useCase"/>
    <Arg name="ticketManagementApplication" value="ref:ticketManagementApplication"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="action" value="open"/>
    <Arg name="identityRequestId"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="ticketProject"/>
    <Arg name="ticketId"/>
    <Arg name="ticketDataGenerationRule"/>
    <Arg name="ticketPlan"/>
    <Description>
			Call a subprocess to create a ticket in the
			ticketManagementApplication
			is non-null.
			You can specify a specific
			'ticketDataGenerationRule' here or you can
			also specify
			it on the
			application. It'll be read from the argument first and fall
			back to
			the '
			application config.
		</Description>
    <Return name="ticketId" to="externalTicketId"/>
    <Transition to="Provision Birthright roles"/>
  </Step>
  <Step action="call:refreshIdentity" icon="Task" name="Provision Birthright roles" posX="421" posY="21" wait="1">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="provision" value="true"/>
    <Arg name="promoteAttributes" value="true"/>
    <Arg name="correlateEntitlements" value="true"/>
    <Transition to="Refresh Identity Attributes"/>
  </Step>
  <Step action="call:refreshIdentity" icon="Task" name="Refresh Identity Attributes" posX="555" posY="25">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="promoteAttributes" value="true"/>
    <Arg name="synchronizeAttributes" value="true"/>
    <Transition to="Add Notification Attributes"/>
  </Step>
  <Step action="call:sendMultipleNotifications" configForm="Provisioning Notification Step Form" icon="Email" name="Notify Stakeholders" posX="839" posY="26">
    <Arg name="requesterEmail" value="script:getEmail(launcher)"/>
    <Arg name="otherUsersToNotifyEmailTemplate" value="ADGM - Joiner HR Notification"/>
    <Arg name="notificationScheme" value="otherUsers,securityOfficer"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="userEmailTemplate" value="ADGM - Joiner Welcome Notification"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="managerEmail" value="script:getManagersEmail(identityName)"/>
    <Arg name="otherUsersToNotify" value="Joiner Notification,spadmin"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="userEmail" value="script:getUserEmail(identityName, plan)"/>
    <Arg name="mailId">
      <Script>
        <Source><![CDATA[
			import sailpoint.object.Identity;
			Identity identity=context.getObjectByName(Identity.class, identityName);
			return identity.getEmail();
        ]]></Source>
      </Script>
    </Arg>
    <Arg name="securityOfficerName"/>
    <Arg name="securityOfficerEmailTemplate" value="ADGM - Joiner Portal Notification"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="managerEmailTemplate" value="ADGM Manager Notification - User Create"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="appMap">
      <Script>
        <Source><![CDATA[
			import sailpoint.object.Application;
			import sailpoint.object.Identity;
			import sailpoint.object.Link;
			import sailpoint.object.Configuration;
			import java.util.List;
			
			Identity identity=context.getObjectByName(Identity.class, identityName);
			String adIDName = "";
			List links = identity.getLinks();
			
			Configuration config = context.getObjectByName(Configuration.class,"ADGM Configuration");
			List ignoreApps = config.get("IgnoreAppsJoinerNotification");
			
			List mapAppList = new ArrayList();
			if (links!=null) {
			  for (Link link : links) {
			   
			    Application app = link.getApplication();
			    if (app == null) {
			      return false;
			    }
			    
			    if(ignoreApps.contains(app.getName())){
			    	continue;
			    } 
			  
			    String accountId = link.getDisplayableName();
			    if (accountId == null )
			        accountId = link.getNativeIdentity();
			  
			    Map appParam = new HashMap();
			    appParam.put("application", app.getName());
			    
			    if(app.getType().equalsIgnoreCase("Active Directory - Direct")){
			    	adIDName = accountId;
			    }
			    appParam.put("accountid", accountId);
			  
			    mapAppList.add(appParam);
			  }
			}
			Map portal = new HashMap();
			
			portal.put("application", "ADGM - Intranet Portal");
			portal.put("accountid", adIDName);
			mapAppList.add(portal);
			return mapAppList;
        ]]></Source>
      </Script>
    </Arg>
    <Arg name="launcher" value="ref:launcher"/>
    <Description>
			Notify the various actors specified on notification
			scheme.
		</Description>
    <Transition to="Notify"/>
  </Step>
  <Step condition="script:(ticketManagementApplication != null)" icon="Task" name="Update Ticket Post Provision" posX="1055" posY="25">
    <Arg name="trace" value="ref:trace"/>
    <Arg name="useCase" value="ref:useCase"/>
    <Arg name="ticketManagementApplication" value="ref:ticketManagementApplication"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="action" value="postProvisioning"/>
    <Arg name="identityRequestId"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="ticketProject"/>
    <Arg name="ticketId"/>
    <Arg name="ticketDataGenerationRule"/>
    <Arg name="ticketPlan"/>
    <Description>
			Call a subprocess to update the ticket in the
			ticketManagementApplication
			is non-null.

			You can specify a specific
			'ticketDataGenerationRule' here or you can
			also specify
			it on the
			application. It'll be read from the argument first and fall
			back to
			the '
			application config.

		</Description>
    <Transition to="Finalize"/>
  </Step>
  <Step icon="Catches" name="Finalize" posX="1037" posY="134">
    <Arg name="trace" value="ref:trace"/>
    <Arg name="useCase" value="ref:useCase"/>
    <Arg name="batchRequestItemId" value="ref:batchRequestItemId"/>
    <Arg name="autoVerifyIdentityRequest" value="true"/>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="ticketManagementApplication" value="ref:ticketManagementApplication"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="ticketDataGenerationRule"/>
    <Description>
			Call the standard subprocess that can audit/finalize the
			request.
		</Description>
    <Transition to="Employee Bundle Manage Engine Ticket"/>
  </Step>
  <Step condition="(requestRestrictedFolder != null &amp;&amp; requestRestrictedFolder.equalsIgnoreCase(&quot;true&quot;))" icon="Task" name="Update plan for Restricted Folder" posX="593" posY="245" resultVariable="plan">
    <Description>Generate Restricted Folder Plan</Description>
    <Script>
      <Source><![CDATA[
	    import java.util.ArrayList;
	    import java.util.List;
	    
	    import sailpoint.object.Identity;
	    import sailpoint.object.ProvisioningPlan;
	    import sailpoint.object.ProvisioningPlan.AccountRequest;
	    import sailpoint.object.ProvisioningPlan.AttributeRequest;
	    import sailpoint.object.Rule; 
	    import sailpoint.object.Bundle;        
        import sailpoint.api.ObjectUtil;

	    import ObjectUtil;

        Identity identityObject = context.getObjectByName(Identity.class, identityName);
        
        ProvisioningPlan plan = new ProvisioningPlan();
        List roles = identityObject.getAssignedRoles();
        String restrictedFolderRoles = "";
        for (Bundle role : roles){
        	List permittedRoles = role.getPermits();
        	if (permittedRoles != null){
        		for (Bundle permittedRole : permittedRoles){
        			if (permittedRole.getName().contains("Restricted Folders")){
        				restrictedFolderRoles = permittedRole.getName();
        			}
        		}
        	}
        }
        
        if (restrictedFolderRoles != null && !restrictedFolderRoles.equalsIgnoreCase("")){
        	AccountRequest accReq = new AccountRequest();
	        accReq.setApplication("IIQ");
	        accReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
	        
	        AttributeRequest attbtReq = new AttributeRequest();
	        attbtReq.setComments("Requesting for Restricted folder after Joiner onboarding");
	        attbtReq.setName("detectedRoles");
	        attbtReq.setValue(restrictedFolderRoles);
	        attbtReq.setOp(ProvisioningPlan.Operation.Add);
	        
	        List attbtReqs = new ArrayList();
	        attbtReqs.add(attbtReq);
	        //accReq.setAttributeRequests(attbtReqs);
	        
	        accReq.add(attbtReq);
	        
	        plan.add(accReq);
        } else {
        	plan = null;
        }
	    return plan;
	  	]]></Source>
    </Script>
    <Transition to="Submit Restricted Folder Request"/>
  </Step>
  <Step condition="(plan!=null &amp;&amp; requestRestrictedFolder != null &amp;&amp; requestRestrictedFolder.equalsIgnoreCase(&quot;true&quot;))" icon="Approval" name="Submit Restricted Folder Request" posX="405" posY="245">
    <Arg name="identityEmailTemplate"/>
    <Arg name="enableRetryRequest"/>
    <Arg name="securityOfficerElectronicSignature"/>
    <Arg name="fallbackApprover" value="spadmin"/>
    <Arg name="endOnManualWorkItems"/>
    <Arg name="userEmailTemplate"/>
    <Arg name="policiesToCheck"/>
    <Arg name="project"/>
    <Arg name="workItemComments" value="Request auto-submitted for restricted folders"/>
    <Arg name="identityRequestId"/>
    <Arg name="approvalSplitPoint"/>
    <Arg name="source"/>
    <Arg name="identityDisplayName"/>
    <Arg name="foregroundProvisioning" value="false"/>
    <Arg name="ownerElectronicSignature"/>
    <Arg name="batchRequestItemId"/>
    <Arg name="splitPlans"/>
    <Arg name="doRefresh"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="flow" value="AccessRequest"/>
    <Arg name="identityElectronicSignature"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="approvalSet"/>
    <Arg name="violationReviewDecision"/>
    <Arg name="filterRejects"/>
    <Arg name="splitProjects"/>
    <Arg name="workItemMaxReminders"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="approvalEmailTemplate" value="ADGM - LCM Approval Notification"/>
    <Arg name="ticketManagementApplication" value="ref:ticketManagementApplication"/>
    <Arg name="securityOfficerName"/>
    <Arg name="approvingIdentities"/>
    <Arg name="workItemHoursTillEscalation"/>
    <Arg name="managerEmailTemplate"/>
    <Arg name="ticketId"/>
    <Arg name="approvalScheme" value="owner"/>
    <Arg name="allowRequestsWithViolations"/>
    <Arg name="workItemHoursBetweenReminders"/>
    <Arg name="workItemPriority"/>
    <Arg name="managerElectronicSignature"/>
    <Arg name="requireViolationReviewComments"/>
    <Arg name="splitApprovalSet"/>
    <Arg name="approvalMode"/>
    <Arg name="trace"/>
    <Arg name="endOnProvisioningForms"/>
    <Arg name="approvalAssignmentRule" value="ADGM Joiner Approval Assignment Rule"/>
    <Arg name="splitWorkItemComments"/>
    <Arg name="notificationScheme"/>
    <Arg name="policyViolations"/>
    <Arg name="workItemReminderTemplate"/>
    <Arg name="policyScheme"/>
    <Arg name="setPreviousApprovalDecisions"/>
    <Arg name="useCase" value="AccessRequest"/>
    <Arg name="optimisticProvisioning" value="true"/>
    <Arg name="securityOfficerEmailTemplate"/>
    <Description>Request For Department Restricted Folder</Description>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Stop" name="Stop" posX="194" posY="187"/>
  <Step action="call:sendMultipleNotifications" configForm="Provisioning Notification Step Form" icon="Email" name="Notify" posX="935" posY="26">
    <Arg name="requesterEmail" value="script:getEmail(launcher)"/>
    <Arg name="otherUsersToNotifyEmailTemplate" value="ADGM - Joiner Portal Notification"/>
    <Arg name="notificationScheme" value="otherUsers"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="userEmailTemplate"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="managerEmail" value="script:getManagersEmail(identityName, plan)"/>
    <Arg name="otherUsersToNotify" value="331,134,340,078,362,308,sara.alkhatib,122"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="userEmail" value="script:getUserEmail(identityName, plan)"/>
    <Arg name="securityOfficerName"/>
    <Arg name="securityOfficerEmailTemplate"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="managerEmailTemplate"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Description>
      	  Notify the various actors specified on notification scheme.
        </Description>
    <Transition to="Update Ticket Post Provision"/>
  </Step>
  <Step action="call:sendMultipleNotifications" configForm="Provisioning Notification Step Form" icon="Email" name="Employee Bundle Manage Engine Ticket" posX="853" posY="137">
    <Arg name="requesterEmail" value="script:getEmail(launcher)"/>
    <Arg name="otherUsersToNotifyEmailTemplate" value="Manage Engine Ticket Creation Joiner"/>
    <Arg name="notificationScheme" value="otherUsers"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="userEmailTemplate"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="managerEmail" value="script:getManagersEmail(identityName, plan)"/>
    <Arg name="otherUsersToNotify" value="IT Support"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="userEmail" value="script:getUserEmail(identityName, plan)"/>
    <Arg name="securityOfficerName"/>
    <Arg name="securityOfficerEmailTemplate"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="managerEmailTemplate"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="launcher" value="ref:launcher"/>
    <ConditionScript>
      <Source><![CDATA[
    import sailpoint.object.Link;
    import java.util.List;     
    import sailpoint.object.Identity;
     import org.apache.log4j.Logger;
      
      Logger log = Logger.getLogger("adgm.workflow.joiner");
		
		// Grab the cube
     Identity cube = context.getObjectByName(Identity.class, identityName);
     
    if(cube.getAttribute("employeeType").equals("Intern"))
    {
        return false;
    }
    else{
      return true;
    }]]></Source>
    </ConditionScript>
    <Transition to="Intern Bundle Manage Engine"/>
  </Step>
  <Step action="call:sendMultipleNotifications" configForm="Provisioning Notification Step Form" icon="Email" name="Intern Bundle Manage Engine" posX="679" posY="132">
    <Arg name="requesterEmail" value="script:getEmail(launcher)"/>
    <Arg name="otherUsersToNotifyEmailTemplate" value="Manage Engine Ticket Creation Joiner Intern Bundle"/>
    <Arg name="notificationScheme" value="otherUsers"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="userEmailTemplate"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="managerEmail" value="script:getManagersEmail(identityName, plan)"/>
    <Arg name="otherUsersToNotify" value="IT Support"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="userEmail" value="script:getUserEmail(identityName, plan)"/>
    <Arg name="securityOfficerName"/>
    <Arg name="securityOfficerEmailTemplate"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="managerEmailTemplate"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="launcher" value="ref:launcher"/>
    <ConditionScript>
      <Source><![CDATA[
    import sailpoint.object.Link;
    import java.util.List;     
    import sailpoint.object.Identity;
     import org.apache.log4j.Logger;
      
      Logger log = Logger.getLogger("adgm.workflow.joiner");
		
		// Grab the cube
     Identity cube = context.getObjectByName(Identity.class, identityName);
     
    if(cube.getAttribute("employeeType").equals("Intern"))
    {
        return true;
    }
    else{
      return false;
    }]]></Source>
    </ConditionScript>
    <Description>
      	  Notify the various actors specified on notification scheme.
        </Description>
    <Transition to="Stop"/>
  </Step>
</Workflow>